// $Id$

// Purpose: Test C++ programs

/* scp ~/c++/tst.cc esmf.ess.uci.edu:c++
   como -o tst tst.cc ${COMOROOT}/libcomo/libcomo.a
   g++ -Wall -g -I${HOME}/include -o tst tst.cc
   icpc -g -I/usr/local/include -I${HOME}/include -cxxlib-icc -o tst tst.cc
   icpc -g -I/usr/local/include -I${HOME}/include -cxxlib-icc -openmp -openmp_report0 -o tst tst.cc
   pathCC -g -o tst tst.cc
   pathCC -g -mp -o tst tst.cc
   pathCC -g -mp -fno-exceptions -o tst tst.cc
   pgCC -g -mp -o tst tst.cc // NB: -g may cause failure
   pgCC -mp -o tst tst.cc
   xlC_r -g -o tst tst.cc */

#include <complex>
#include <iostream>
#include <sstream>

#ifdef _OPENMP
#include <omp.h> /* OpenMP pragmas */
#endif /* not _OPENMP */

int main()
{
  std::complex<double> scalar;
  //  scalar=(0.0,1.0);

  long long x;
  std::stringstream str("9223372036854775807");
  str >> x;
  std::cout << x << std::endl;

  int thr_nbr_act=0;

#ifdef _OPENMP
#pragma omp parallel default(none) shared(std::cout,thr_nbr_act)
  {
#pragma omp single nowait
    {
      thr_nbr_act=omp_get_num_threads();
      std::cout <<  "Parallel regions spawn teams of " << thr_nbr_act << " threads" << std::endl;
    }
  }
#else
  thr_nbr_act+=0*thr_nbr_act;
  std::cout << "Not attempting OpenMP threading" << std::endl;
#endif

#define TKN2SNG_PRV(x) #x
#define TKN2SNG(x) TKN2SNG_PRV(x)
  const std::string usr_cpp(TKN2SNG(USER));
  std::cout << "usr_cpp = " << usr_cpp << std::endl;

  // 20060816: pgCC does not implement try/throw/catch
  try{
    if(thr_nbr_act == 0){
      throw 1;
    }
  }catch(...){
    std::cout << "Caught exception generated by thr_nbr_act == 0" << std::endl;
  }
}

